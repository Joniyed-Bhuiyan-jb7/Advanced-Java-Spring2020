import comparator.StudentIdComparator;import model.Student;import services.StudentService;import java.util.Comparator;import java.util.List;public class Mian {    static class StudentCgpaComarator implements Comparator<Student>{        @Override        public int compare(Student a, Student b) {            int c = (int) (a.getCgpa()*100);            int d = (int) (b.getCgpa()*100);            return d-c;        }    }    public static void main(String[] args) {        StudentService studentService = new StudentService();        List<Student> studentList = studentService.getStudentList();        System.out.println("Before sorting...\n");        studentList.forEach(student ->{            System.out.println(student.getId()+" "+student.getName()+" "+student.getCgpa());        });        System.out.println("After sorting...\n");        Comparator<Student> comparator = new StudentCgpaComarator();        studentList.sort(comparator);        System.out.println("\nSort using studentCGPAComparator made class...\n");        studentList.forEach(student -> {            System.out.println(student.getId()+" "+student.getName()+" "+student.getCgpa());        });        Comparator<Student> comparator1=new StudentIdComparator();        studentList.sort(comparator1);        System.out.println("\nSort by student id using inner class......\n");        studentList.forEach(student -> {            System.out.println(student.getId()+" "+student.getName()+" "+student.getCgpa());        });        System.out.println("\nsort using lamdas by name.....\n");        studentList.sort((a,b)->{            String s1=a.getName();            String s2=b.getName();            return Integer.compare(s1.compareTo(s2),0);        });        studentList.forEach(student -> {            System.out.println(student.getId()+" "+student.getName()+" "+student.getCgpa());        });    }}