package repository;import exceptions.ProductNotFoundException;import model.Product;import java.sql.*;import java.util.ArrayList;import java.util.List;public class ProductDaoMySQLImplementation implements ProductDao {    private static final Connection connection = ConnectionSingleton.getConnection();    @Override    public List<Product> readAll() {        String query = QuerySingleton.getQuery("READ_ALL");        System.out.println(query);        List<Product> productList = new ArrayList<>();        try {            PreparedStatement statement = connection.prepareStatement(query);            ResultSet resultSet = statement.executeQuery();            while (resultSet.next()){                Product product = new Product(                        resultSet.getInt("productID"),                        resultSet.getString("productName"),                        resultSet.getString("quantityPerUnit"),                        resultSet.getDouble("unitPrice"),                        resultSet.getDouble("unitsInStock"),                        resultSet.getDouble("unitsOnOrder"),                        resultSet.getDouble("reorderLevel"),                        resultSet.getString("discontinued").charAt(0) == '1'                );                productList.add(product);            }            return productList;        } catch (SQLException e) {            e.printStackTrace();        }        return null;    }    @Override    public Product getSingleProduct(int id) {        String query = QuerySingleton.getQuery("READ_SINGLE");        try {            PreparedStatement statement = connection.prepareStatement(query);            statement.setInt(1,id);            ResultSet resultSet = statement.executeQuery();            resultSet.next();            return new Product(                        resultSet.getInt("productID"),                        resultSet.getString("productName"),                        resultSet.getString("quantityPerUnit"),                        resultSet.getDouble("unitPrice"),                        resultSet.getDouble("unitsInStock"),                        resultSet.getDouble("unitsOnOrder"),                        resultSet.getDouble("reorderLevel"),                        resultSet.getString("discontinued").charAt(0) == '1'                );        }catch (Exception e){        }        return null;    }    @Override    public Product createProduct(Product product) throws ProductNotFoundException {        String query = QuerySingleton.getQuery("INSERT_PRODUCT");        try {           PreparedStatement statement = connection.prepareStatement(query);           statement.setInt(1,product.getProductId());           statement.setString(2,product.getProductName());           statement.setString(3,product.getQuantityPerUnit());           statement.setDouble(4,product.getUnitPrice());           statement.setDouble(5,product.getUnitsInStock());           statement.setDouble(6,product.getUnitsOnOrder());           statement.setDouble(7,product.getReorderLevel());           statement.setBoolean(8,product.getDiscontinued());           statement.execute();        } catch (SQLException e) {            e.printStackTrace();        }        return getSingleProduct(product.getProductId());    }    @Override    public Product updateProduct(Product product,int id) {        String query = QuerySingleton.getQuery("UPDATE_PRODUCT");        try {            PreparedStatement statement = connection.prepareStatement(query);            statement.setString(1,product.getProductName());            statement.setString(2,product.getQuantityPerUnit());            statement.setDouble(3,product.getUnitPrice());            statement.setDouble(4,product.getUnitsInStock());            statement.setDouble(5,product.getUnitsOnOrder());            statement.setDouble(6,product.getReorderLevel());            statement.setBoolean(7,product.getDiscontinued());            statement.setInt(8,id);            statement.execute();            System.out.println("Successfully updated "+id+" no. product");        } catch (SQLException e) {            e.printStackTrace();        }        return getSingleProduct(id);    }    @Override    public Product deleteProduct(int productid) {        String query = QuerySingleton.getQuery("DELETE_SIGNLE");        Product product = null;        product = getSingleProduct(productid);        try {            PreparedStatement statement = connection.prepareStatement(query);            statement.setInt(1,productid);            statement.execute();            System.out.println(productid+" no product Successfully deleted");        } catch (SQLException e) {            e.printStackTrace();        }        return product;    }    @Override    public List<Product> deleteAll() {        String query = QuerySingleton.getQuery("DELETE_ALL");        try {            PreparedStatement statement = connection.prepareStatement(query);            int rowCount =  statement.executeUpdate();            System.out.println(rowCount+" rows are affected..");        } catch (SQLException e) {            e.printStackTrace();        }        return  readAll();    }    @Override    public List<Product> createMultipleProduct(List<Product> productList) {        String qeury = QuerySingleton.getQuery("INSERT_PRODUCT");        try {            PreparedStatement statement = connection.prepareStatement(qeury);            long start = System.currentTimeMillis();            for(Product product:productList){                statement.setInt(1,product.getProductId());                statement.setString(2,product.getProductName());                statement.setString(3,product.getQuantityPerUnit());                statement.setDouble(4,product.getUnitPrice());                statement.setDouble(5,product.getUnitsInStock());                statement.setDouble(6,product.getUnitsOnOrder());                statement.setDouble(7,product.getReorderLevel());                statement.setBoolean(8,product.getDiscontinued());                statement.addBatch();            }            statement.executeBatch();            long end = System.currentTimeMillis();            System.out.println(((end-start)/1000)+"s");        } catch (SQLException e) {            e.printStackTrace();        }//        try {//            Statement statement = connection.createStatement();////            long start = System.currentTimeMillis();//            for (Product product: productList){//                String qeury = String.format("INSERT INTO product_jb values(%d,'%s','%s',%f,%f,%f,%f,%b)",////                        product.getProductId(),//                        product.getProductName(),//                        product.getQuantityPerUnit(),//                        product.getUnitPrice(),//                        product.getUnitsInStock(),//                        product.getUnitsOnOrder(),//                        product.getReorderLevel(),//                        product.getDiscontinued()//                        );////                statement.executeUpdate(qeury);//            }//            long end = System.currentTimeMillis();//            System.out.println(((end-start)/1000)+"s");////        } catch (SQLException e) {//            e.printStackTrace();//        }        return  null;    }////    public void CloseConnection(){//        try {//            statement.close();//            connection.close();//            System.out.println("Close the connection to the database.");//        } catch (SQLException e) {//            e.printStackTrace();//        }//    }}