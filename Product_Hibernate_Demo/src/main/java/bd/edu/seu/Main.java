package bd.edu.seu;import bd.edu.seu.model.PriceHistory;import bd.edu.seu.model.Product;import bd.edu.seu.model.Supplier;import bd.edu.seu.repository.*;import bd.edu.seu.util.HibernateUtil;import java.sql.SQLOutput;import java.time.LocalDateTime;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import java.util.stream.Collector;import java.util.stream.Collectors;public class Main {    public static Product createProduct(long id,String name, String Quantity, double price , double stock,double oroder, double reroder){        Product product = new Product();        product.setId(id);        product.setName(name);        product.setQuantityPerUnit(Quantity);        product.setUnitPrice(price);        product.setUnitsInStock(stock);        product.setUnitsOnOrder(oroder);        product.setReOrderLevel(reroder);        product.setDiscontinued(0);        return product;    }    public static Supplier createSupplier(int id,String name,String add ){        Supplier supplier = new Supplier();        supplier.setId(id);        supplier.setName(name);        supplier.setAddress(add);        return supplier;    }    public static PriceHistory creaPriceHistory(double price, Product product, LocalDateTime localDateTime){        PriceHistory priceHistory = new PriceHistory();        priceHistory.setPricePerUnit(price);        priceHistory.setProduct(product);        priceHistory.setLocalDateTime(localDateTime);        return priceHistory;    }    public static void main(String[] args) {        Product product = createProduct(1,"joniyed","1",1,1,1,1);        Product product1 = createProduct(3,"mum water","1",1,1,1,1);      //  Supplier supplier = createSupplier(1,"jb","BB");//        System.out.println(product);//        productDao.save(product);////        System.out.println(productDao.findProductByid(5));//        productDao.readAll().stream().forEach(System.out::println);//        System.out.println(productDao.updateProduct(product));        GenericDao<Product,Long> productDao = new GenericDaoSQLImplementation<>(Product.class);        GenericDao<Supplier,Integer> supplierDao = new GenericDaoSQLImplementation<>(Supplier.class);        GenericDao<PriceHistory,Integer> priceHistoryDao = new GenericDaoSQLImplementation<>(PriceHistory.class);        Supplier supplier1 = new Supplier(1,"joni","somewhere");        Supplier supplier = createSupplier(2,"jon","nowhere");        product.setSuppliers(Arrays.asList(supplier,supplier1));        //TODO save suppliers        supplierDao.save(supplier1);        supplierDao.save(supplier);        //TODO save products        productDao.save(product);        productDao.save(product1);        //TODO findall() method cl for product and supplier        productDao.findAll().forEach(System.out::println);        supplierDao.findAll().forEach(System.out::println);        //TODO delete all rpoduct        //productDao.deleteAll();        //TODO findproduct by id        System.out.println("Find by id");        System.out.println(productDao.findById((long) 1));        //TODO delete supplier for particular id        //supplierDao.delete(2);        //TODO update supplier for a particular id        //supplierDao.update(supplier,1);        //TODO add priceHistory        PriceHistory priceHistory = creaPriceHistory(10,product,LocalDateTime.now());        priceHistoryDao.save(priceHistory);        priceHistory = creaPriceHistory(12,product,LocalDateTime.now());        priceHistoryDao.save(priceHistory);        //TODO delete product for particular id        //priceHistoryDao.deleteAll();        //productDao.delete((long) 1);        //todo findall product list        productDao.findAll().forEach(System.out::println);        //todo find price history        priceHistoryDao.findAll().forEach(System.out::println);/*        List<Integer> list = new ArrayList<>();        for(int i=0;i<500;i++){            list.add(i+1);        }        List<Integer> collect = list.stream().filter(s -> s % 2 == 0).collect(Collectors.toList());        System.out.println(collect);        System.out.println(list.stream().map(a -> a*10).collect(Collectors.toList()));        System.out.println(list.stream().map(a -> a*100).max(Integer::compareTo));        System.out.println(list.stream().min(Integer::compareTo));        System.out.println(list.stream().parallel().sorted((a,b)-> a-b).collect(Collectors.toList()));        System.out.println(list.stream().parallel().sorted((a,b)-> b-a).collect(Collectors.toList()));        System.out.println(list.stream().parallel().mapToInt(a->a).average()); */    }}