package bd.edu.seu.namedetails.controller;import bd.edu.seu.namedetails.exception.ResourseAlreadyExistException;import bd.edu.seu.namedetails.exception.ResourseDoesnotExistException;import bd.edu.seu.namedetails.exception.ResourseNotFoundException;import bd.edu.seu.namedetails.model.Member;import bd.edu.seu.namedetails.service.MemberService;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.List;@RestController@RequestMapping(value = "api/v1/members")public class MemberController {    private MemberService memberService;    public MemberController(MemberService memberService) {        this.memberService = memberService;    }    @GetMapping("")    public ResponseEntity<List<Member>> findAll(){        List<Member> memberList = memberService.findAll();        if(!memberList.isEmpty()){            return ResponseEntity.ok(memberList);        }else{            return ResponseEntity.noContent().build();        }    }    @GetMapping("/{id}")    public ResponseEntity<Member> findById(@PathVariable long id){        try {            Member member = memberService.findById(id);            return ResponseEntity.ok(member);        } catch (ResourseDoesnotExistException e) {            return ResponseEntity.notFound().build();        }    }    @GetMapping("/search/{name}")    public ResponseEntity<List<Member>> searchByName(@PathVariable String name){        try {            List<Member> memberList = memberService.findByName(name);            return ResponseEntity.ok(memberList);        } catch (ResourseNotFoundException e) {            return ResponseEntity.notFound().build();        }    }    @PostMapping("")    public ResponseEntity<Member> saveMember(@RequestBody Member member){        try {            Member saveMember = memberService.saveMember(member);            return ResponseEntity.status(HttpStatus.CREATED).body(member);        } catch (ResourseAlreadyExistException e) {            return ResponseEntity.badRequest().build();        }    }    @PostMapping("/update/{id}")    public ResponseEntity<Member> updateMember(@RequestBody Member member,@PathVariable long id){        try {            Member updateMember = memberService.updateMember(member, id);            return ResponseEntity.ok(member);        } catch (ResourseDoesnotExistException e) {            return ResponseEntity.badRequest().build();        }    }    @DeleteMapping("/{id}")    public ResponseEntity<String> deleteBYId(@PathVariable long id){        try {            memberService.deleteById(id);            return ResponseEntity.ok(id+" no member successfully deleted");        } catch (ResourseDoesnotExistException e) {            return ResponseEntity.badRequest().build();        }    }    @DeleteMapping("")    public ResponseEntity<String> deleteAll(){        try {            memberService.deleteAll();            return ResponseEntity.ok("Delete all record");        } catch (ResourseNotFoundException e) {            return ResponseEntity.notFound().build();        }    }}